// ============================================================================
// W2Inc, Amsterdam 2024, All Rights Reserved.
// See README in the root project for more information.
// ============================================================================

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL_PRISMA")
}

// General Purpose Models
// ============================================================================

model User {
    id                String             @id @default(uuid())
    email             String
    verified          Boolean            @default(false)
    hash              String?
    tfa               String?
    dob               DateTime?
    gender            Int?
    country           String?
    flags             Int                @default(0)
    firstName         String?
    lastName          String?
    phone             String?
    providerId        String?
    provider          String?
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @default(now()) @updatedAt
    sessions          Session[]
    resetTokens       ResetToken[]
    verificationToken VerificationToken?
    trackCompletion   UserTrack?

    @@map("user")
}

// Auth
// ============================================================================

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model ResetToken {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("reset_token")
}

model VerificationToken {
    id        Int      @id @default(autoincrement())
    code      String // Secure
    email     String
    userId    String   @unique
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("verification_token")
}

// Models
// ============================================================================

// Some sort of event that is taking place.
model Event {
    id String @id

    startsAt DateTime
    type     Int // 1=Openday, 2=Piscine, 3=Kickoff

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("event")
}

// Tracks
// ============================================================================

// Track to define the steps to take
model ApplicationTrack {
    id          String            @id
    name        String
    description String?
    isActive    Boolean           @default(true)
    steps       ApplicationStep[]
    completions UserTrack[] // Added relation to track completions
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @default(now()) @updatedAt

    @@map("application_track")
}

// A step in application process
model ApplicationStep {
    id          String           @id
    trackId     String
    track       ApplicationTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)
    type        Int // 1=BOARDING, 2=INTERMISSION, 3=CHALLENGE, 4=WAITING, 5=SUCCESS, 6=FAILURE
    order       Int
    content     String? // HTML content for challenges (iframe and spec compliant)
    completions UserStep[] // Relation to track which users completed this step
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @default(now()) @updatedAt

    @@index([trackId, order])
    @@map("application_step")
}

// Track individual user completions of a track
model UserTrack {
    id String @id

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    trackId String
    track   ApplicationTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)

    completedAt DateTime? // Nullable to allow for in-progress states
    createdAt   DateTime  @default(now())

    steps UserStep[] // Relation to completed steps

    @@index([userId, trackId])
    @@index([completedAt])
    @@map("user_track")
}

// Track completion of individual steps by users
model UserStep {
    id          String @id @default(uuid())
    userTrackId String

    userTrack UserTrack @relation(fields: [userTrackId], references: [id], onDelete: Cascade)
    stepId    String

    step        ApplicationStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
    completedAt DateTime? // Nullable to allow for in-progress states

    @@unique([userTrackId, stepId])
    @@map("user_step")
}

// ============================================================================

// Monthly user metrics
model UserMetrics {
    year      Int
    month     Int
    userCount Int
    completedTracks Int

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@id([year, month])
    @@map("user_metrics")
}

// // Monthly track completion metrics
// model TrackCompletionMetrics {
//     id               String           @id @default(uuid())
//     year             Int
//     month            Int
//     trackId          String
//     track            ApplicationTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)
//     completionCount  Int
//     prevMonthCount   Int?
//     percentageChange Float? // Can be calculated on query or stored
//     createdAt        DateTime         @default(now())
//     updatedAt        DateTime         @default(now()) @updatedAt

//     @@unique([year, month, trackId])
//     @@map("track_completion_metrics")
// }
